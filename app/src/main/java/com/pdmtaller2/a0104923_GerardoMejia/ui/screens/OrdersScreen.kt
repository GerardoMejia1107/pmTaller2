package com.pdmtaller2.a0104923_GerardoMejia.ui.screensimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.pdmtaller2.a0104923_GerardoMejia.data.Dishimport com.pdmtaller2.a0104923_GerardoMejia.ui.components.DishCardimport com.pdmtaller2.a0104923_GerardoMejia.ui.components.OrderDishCard@OptIn(ExperimentalMaterial3Api::class)@Composablefun OrdersScreen(navController: NavController, dishes: MutableList<Dish>) {    val windowColor = Color(0xFFFEF9F2)    val topBarColor = Color(0xFF75A47F)    val topBarTitleColor = Color(0xFFFBFBFB)    Scaffold(        containerColor = windowColor,        topBar = {            TopAppBar(                colors = TopAppBarDefaults.topAppBarColors(containerColor = topBarColor),                title = {                    Text(                        "Your Orders", style = TextStyle(                            fontSize = 30.sp,                            fontWeight = FontWeight.Bold,                            color = topBarTitleColor                        )                    )                },            )        }    ) { innerPadding ->        if (dishes.isEmpty()) {            Text(text = "No hay platillos en tu orden")        } else {            LazyColumn(                modifier = Modifier                    .padding(innerPadding)                    .padding(horizontal = 20.dp)            ) {                items(dishes) { dish ->                    OrderDishCard(dish = dish, orderDish = dishes)                }            }        }    }}