package com.pdmtaller2.a0104923_GerardoMejia.ui.screensimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldColorsimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.pdmtaller2.a0104923_GerardoMejia.data.Dishimport com.pdmtaller2.a0104923_GerardoMejia.data.Restaurantimport com.pdmtaller2.a0104923_GerardoMejia.ui.components.CustomTopCardimport com.pdmtaller2.a0104923_GerardoMejia.ui.components.DishCardimport com.pdmtaller2.a0104923_GerardoMejia.ui.navigation.Screen@Composablefun RestaurantDetailScreen(    restaurant: Restaurant,    navController: NavController,    orderDishes: MutableList<Dish>) {    val windowColor = Color(0xFFFEF9F2)    var searchStatement by remember { mutableStateOf("") }    val context = LocalContext.current    var dishes = listOf<Dish>()    var filteredData = restaurant.menu.filter {        it.name.contains(searchStatement, ignoreCase = true)    }    Scaffold(        containerColor = windowColor,        topBar = {            CustomTopCard(                foodName = restaurant.name,                navController = navController,                route = Screen.ListsScreen.route            )        }    ) { innerPadding ->        Column(            modifier = Modifier                .padding(innerPadding)                .padding(horizontal = 20.dp)        ) {            Spacer(modifier = Modifier.height(8.dp))            Text(text = restaurant.description)            Spacer(modifier = Modifier.height(4.dp))            Text(text = "📍 ${restaurant.location}")            Spacer(modifier = Modifier.height(4.dp))            Text(text = "🍽️ Categorías: ${restaurant.categories.joinToString()}")            Spacer(modifier = Modifier.height(16.dp))            OutlinedTextField(                value = searchStatement,                onValueChange = { searchStatement = it },                label = { Text("Buscar en el menú") },                maxLines = 1,                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 16.dp)                    .background(windowColor)                    .padding(8.dp),            )            Spacer(modifier = Modifier.height(16.dp))            Text(text = "Consulta nuestro menú", modifier = Modifier.padding(8.dp), style =                TextStyle(fontSize = 18.sp, fontWeight = FontWeight.SemiBold))            LazyColumn(                modifier = Modifier                    .fillMaxSize(),                contentPadding = PaddingValues(                    top = 0.dp,                    bottom = 140.dp,                    start = 20.dp,                    end = 20.dp                ),                verticalArrangement = Arrangement.spacedBy(8.dp)            ) {                dishes = if (filteredData.isEmpty()) {                    restaurant.menu                } else {                    filteredData                }                items(dishes) { dish ->                    DishCard(dish = dish, orderDish = orderDishes)                }            }        }    }}